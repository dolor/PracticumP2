package eindopdracht.client.gui;

import java.awt.Component;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.text.Document;

import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JMenuBar;
import javax.swing.JMenu;
import javax.swing.JMenuItem;

import eindopdracht.client.GameController;
import eindopdracht.client.MainController;
import eindopdracht.client.model.player.HumanPlayer;
import eindopdracht.client.model.player.Player;
import eindopdracht.client.network.Network;
import eindopdracht.model.Command;
import eindopdracht.util.PTLog;
import eindopdracht.util.Protocol;

import javax.swing.JButton;
import eindopdracht.client.gui.gameboard.BoardPanel;
import java.awt.Insets;

import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.SwingConstants;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import java.awt.event.KeyEvent;
import java.awt.event.InputEvent;
import javax.swing.JLabel;
import javax.swing.Box;

public class PentagoXLWindow extends JFrame implements WindowListener,
		ComponentListener, ActionListener, Observer {

	private JPanel contentPane;

	private JMenuItem connectMenuItem;
	private JMenuItem joinMenuItem;
	private JMenuItem disconnectMenuItem;
	private JMenuItem exitMenuItem;
	JFrame connectFrame;
	JFrame newGameFrame;
	private JTextPane chatWindow;
	private JMenuItem hintButton;
	private JMenuItem restartButton;
	private JTextField chatField;
	private JButton chatButton;
	private PlayerListFrame playerList;
	private MainController mc;
	private BoardPanel bord;
	private JLabel statusLabel;

	public static int minimumWidth = 670;
	public static int minimumHeight = 425;

	/**
	 * Create the frame. Generated by WindowBuilder, edited by Erik Steenman
	 * 
	 * @author Erik Steenman
	 */
	public PentagoXLWindow(MainController mc) {
		this.mc = mc;
		this.addComponentListener(this);

		setTitle("Pentago XL");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 700, 483);

		JMenuBar menuBar = new JMenuBar();
		setJMenuBar(menuBar);

		JMenu mnGame = new JMenu("Game");
		menuBar.add(mnGame);

		connectMenuItem = new JMenuItem("Connect");
		connectMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C,
				InputEvent.CTRL_MASK | InputEvent.ALT_MASK));
		connectMenuItem.addActionListener(this);
		mnGame.add(connectMenuItem);

		joinMenuItem = new JMenuItem("Join");
		joinMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_J,
				InputEvent.CTRL_MASK | InputEvent.ALT_MASK));
		joinMenuItem.setEnabled(false);
		joinMenuItem.addActionListener(this);
		mnGame.add(joinMenuItem);

		disconnectMenuItem = new JMenuItem("Disconnect");
		disconnectMenuItem.setEnabled(false);
		disconnectMenuItem.addActionListener(this);
		mnGame.add(disconnectMenuItem);

		exitMenuItem = new JMenuItem("Exit");
		exitMenuItem.addActionListener(this);
		mnGame.add(exitMenuItem);

		hintButton = new JMenuItem("Give Hint");
		hintButton.setHorizontalAlignment(SwingConstants.LEFT);
		hintButton.setEnabled(false);
		hintButton.addActionListener(this);
		menuBar.add(hintButton);

		restartButton = new JMenuItem("");
		restartButton.setHorizontalAlignment(SwingConstants.RIGHT);
		restartButton.setEnabled(false);
		restartButton.addActionListener(this);
		menuBar.add(restartButton);

		Component horizontalStrut = Box.createHorizontalStrut(383);
		menuBar.add(horizontalStrut);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		GridBagLayout gbl_contentPane = new GridBagLayout();
		gbl_contentPane.columnWidths = new int[] { 333, 236, 40, 0 };
		gbl_contentPane.rowHeights = new int[] { 0, 293, 30, 0 };
		gbl_contentPane.columnWeights = new double[] { 1.0, 0.0, 0.5,
				Double.MIN_VALUE };
		gbl_contentPane.rowWeights = new double[] { 0.0, 1.0, 0.1,
				Double.MIN_VALUE };
		contentPane.setLayout(gbl_contentPane);

		statusLabel = new JLabel("");
		GridBagConstraints gbc_statusLabel = new GridBagConstraints();
		gbc_statusLabel.gridwidth = 2;
		gbc_statusLabel.insets = new Insets(0, 0, 5, 5);
		gbc_statusLabel.gridx = 1;
		gbc_statusLabel.gridy = 0;
		contentPane.add(statusLabel, gbc_statusLabel);

		JPanel bordContainer = new JPanel();
		GridBagConstraints gbc_bordContainer = new GridBagConstraints();
		gbc_bordContainer.gridheight = 2;
		gbc_bordContainer.ipady = 5;
		gbc_bordContainer.ipadx = 5;
		gbc_bordContainer.weightx = 0.8;
		gbc_bordContainer.insets = new Insets(5, 5, 5, 5);
		gbc_bordContainer.fill = GridBagConstraints.BOTH;
		gbc_bordContainer.gridx = 0;
		gbc_bordContainer.gridy = 0;
		contentPane.add(bordContainer, gbc_bordContainer);
		// panel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
		bordContainer.setLayout(null);

		bord = new BoardPanel(this);
		bordContainer.addComponentListener(bord);
		// GridLayout gridLayout = (GridLayout) bord.getLayout();
		// gridLayout.setVgap(8);
		// gridLayout.setHgap(8);
		bordContainer.add(bord);

		chatWindow = new JTextPane();
		chatWindow.setEditable(false);
		chatWindow.setText("");
		GridBagConstraints gbc_chatWindow = new GridBagConstraints();
		gbc_chatWindow.gridwidth = 2;
		gbc_chatWindow.weighty = 0.8;
		gbc_chatWindow.weightx = 0.2;
		gbc_chatWindow.insets = new Insets(0, 0, 5, 0);
		gbc_chatWindow.fill = GridBagConstraints.BOTH;
		gbc_chatWindow.gridx = 1;
		gbc_chatWindow.gridy = 1;
		JScrollPane jsp = new JScrollPane(chatWindow);
		contentPane.add(jsp, gbc_chatWindow);

		chatField = new JTextField();
		chatField.setEditable(false);
		chatField.addActionListener(this);

		playerList = new PlayerListFrame();
		GridBagConstraints gbc_playerList = new GridBagConstraints();
		gbc_playerList.insets = new Insets(0, 0, 0, 5);
		gbc_playerList.fill = GridBagConstraints.BOTH;
		gbc_playerList.gridx = 0;
		gbc_playerList.gridy = 2;
		gbc_playerList.weighty = 0.1;
		JScrollPane playerScroll = new JScrollPane(playerList);
		contentPane.add(playerScroll, gbc_playerList);
		
		GridBagConstraints gbc_chatField = new GridBagConstraints();
		gbc_chatField.insets = new Insets(0, 0, 0, 5);
		gbc_chatField.fill = GridBagConstraints.HORIZONTAL;
		gbc_chatField.gridx = 1;
		gbc_chatField.gridy = 2;
		gbc_chatField.weighty = 0.1;
		contentPane.add(chatField, gbc_chatField);
		chatField.setColumns(10);

		chatButton = new JButton("Send");
		chatButton.setEnabled(false);
		chatButton.addActionListener(this);
		GridBagConstraints gbc_chatButton = new GridBagConstraints();
		gbc_chatButton.anchor = GridBagConstraints.WEST;
		gbc_chatButton.gridx = 2;
		gbc_chatButton.gridy = 2;
		gbc_chatButton.weighty = 0.1;
		contentPane.add(chatButton, gbc_chatButton);
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		if (e.getSource().equals(connectMenuItem)) {
			if (connectFrame == null)
				connectFrame = new ConnectWindow(this);
		} else if (e.getSource().equals(joinMenuItem)) {
			if (newGameFrame == null)
				newGameFrame = new NewGameWindow(this);
		} else if (e.getSource().equals(disconnectMenuItem)) {
			mc.disconnect();
			statusLabel.setText("Disconnected");
		} else if (e.getSource().getClass().equals(JMenuItem.class)
				&& ((JMenuItem) e.getSource()).getText().equals("Exit")) {
			mc.exit();
		} else if (e.getSource().equals(hintButton)) {
			mc.requestHint();
		}

		else if (e.getSource().equals(chatField)) {
			mc.sendChat(chatField.getText());
			this.chatField.setText("");
		} else if (e.getSource().equals(chatButton)) {
			mc.sendChat(chatField.getText());
			this.chatField.setText("");
		} else if (e.getSource().equals(restartButton)) {
			mc.restart();
			restartButton.setText("");
			restartButton.setEnabled(false);
		}
	}

	/**
	 * Connect frame dismissed
	 */
	public void connectFrameDismissed() {
		if (connectFrame != null)
			connectFrame = null;
	}

	/**
	 * New Game frame dismissed
	 */
	public void newGameFrameDismissed() {
		if (newGameFrame != null)
			newGameFrame = null;
	}

	/**
	 * Called if chat is received from the network and has to be displayed
	 * 
	 * @param chat
	 *            to add to the window, should not contain newlines
	 */
	public void receiveChat(String chat) {
		chatWindow.setText(chatWindow.getText() + chat + "\n");
		
		//Scroll naar onder
		Document d = chatWindow.getDocument();
		chatWindow.select(d.getLength(), d.getLength());
	}

	@Override
	public void update(Observable sender, Object object) {

		if (object.getClass().equals(GameController.class)) {
			// Game started
			playerList.setText("");
			GameController game = (GameController) object;

			this.bord.setGame(game);
			game.addObserver(bord);

			this.fillPlayerList(game.getPlayers());
			chatField.setEditable(true);
			chatButton.setEnabled(true);
			statusLabel.setText("Game Started! - "
					+ game.getLocalPlayer().getName());

			// The hint button should only be enabled for a human player
			if (game.getLocalPlayer().getClass().equals(HumanPlayer.class)) {
				hintButton.setEnabled(true);
				((HumanPlayer) game.getLocalPlayer()).setBordPanel(bord);
			}
		}

		else if (Player.class.isAssignableFrom(object.getClass())) {
			//Player is only broadcasted when you joined a server
			statusLabel.setText("Joined as " + ((Player) object).getName());
			this.setTitle("Pentago XL - " + ((Player)object).getName());
		}

		else if (object.getClass().equals(String.class)) {
			if (object.equals("disconnect")) {
				PTLog.log("Window", "Disconnected!");
				connectMenuItem.setEnabled(true);
				joinMenuItem.setEnabled(false);
				disconnectMenuItem.setEnabled(false);
			}
		}

		else if (object.getClass().equals(Command.class)) {
			Command command = (Command) object;
			if (command.getCommand().equals(Protocol.CHAT_SERVER)) {
				this.receiveChat(command.getArgString());
			} else if (command.getCommand().equals(Protocol.END_GAME)) {
				this.endGame();
				int reason = Integer.parseInt(command.getArg(0));

				if (reason == GameController.endDueToWinner) {
					if (command.getArgs().length > 2)
						statusLabel.setText("Winners:");
					else
						statusLabel.setText("Winner:");
					
					for (int i = 1; i < command.getArgs().length; i++) {
						statusLabel.setText(statusLabel.getText() + " "
								+ command.getArg(i));
					}
				} else if (reason == GameController.endDueToRemise) {
					statusLabel.setText("Game Over. No winners.");
				} else if (reason == GameController.endDueToDisconnect) {
					statusLabel.setText(command.getArg(1)
							+ " disconnected, game ended");
				} else if (reason == GameController.endDueToCheat) {
					statusLabel.setText("Invalid move made by "
							+ command.getArg(2) + ", game ended");
				}
				bord.game.getBoard().drawBoard();
			}
		}

		else if (object.getClass().equals(Network.class)) {
			bord.clear();
			connectMenuItem.setEnabled(false);
			joinMenuItem.setEnabled(true);
			disconnectMenuItem.setEnabled(true);
			statusLabel.setText("Connected");
			((Network) object).addObserver(this);
			((Network) object).addObserver(bord);
		}
	}
	
	/**
	 * Tell the window the game ended. Shows a replay button and disables the board.
	 */
	public void endGame() {
		bord.disable();
		PTLog.log("Window", "Now showing a replay button");
		restartButton.setText("Replay");
		restartButton.setEnabled(true);
	}

	/**
	 * Sets the statusLabel in the window to inform the player of changes
	 * 
	 * @param status
	 */
	public void setStatus(String status) {
		statusLabel.setText(status);
	}

	/**
	 * Connect form was sent
	 * 
	 * @param hostname
	 * @param port
	 */
	public void connect(String host, int port) {
		mc.connect(host, port);
	}

	/**
	 * Join form was sent
	 * 
	 * @param name
	 * @param size
	 *            lobby size
	 * @param humanPlayer
	 * @param aiType
	 */
	public void join(String name, int size, boolean humanPlayer, int aiType) {
		mc.join(name, size, humanPlayer, aiType);
	}

	/**
	 * adds all the players to the playerList view
	 * 
	 * @param players
	 *            to add to the list
	 */
	public void fillPlayerList(ArrayList<Player> players) {
		for (Player player : players) {
			playerList.addPlayer(player);
		}
	}

	@Override
	public void windowActivated(WindowEvent e) {

	}

	@Override
	public void windowClosed(WindowEvent e) {
		PTLog.log("Window", "CLOSING");
		System.exit(0);
	}

	@Override
	public void windowClosing(WindowEvent e) {
		e.getWindow().dispose();
	}

	@Override
	public void componentResized(ComponentEvent e) {
		Component c = (Component) e.getSource();
		if (c.getWidth() < minimumWidth && c.getHeight() < minimumHeight)
			c.setSize(minimumWidth, minimumHeight);
		else if (c.getWidth() < minimumWidth)
			c.setSize(minimumWidth, c.getHeight());
		else if (c.getHeight() < minimumHeight)
			c.setSize(c.getWidth(), minimumHeight);
	}

	@Override
	public void windowDeactivated(WindowEvent e) {

	}

	@Override
	public void windowDeiconified(WindowEvent e) {

	}

	@Override
	public void windowIconified(WindowEvent e) {

	}

	@Override
	public void windowOpened(WindowEvent e) {

	}

	@Override
	public void componentHidden(ComponentEvent e) {

	}

	@Override
	public void componentMoved(ComponentEvent e) {

	}

	@Override
	public void componentShown(ComponentEvent e) {

	}
}
